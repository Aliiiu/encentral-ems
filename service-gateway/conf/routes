#swagger
GET            /api-docs.json                                                  controllers.ApiHelpController.getResources
GET            /api-docs.json/auth                                             controllers.ApiHelpController.getResource(path = "/auth")
GET            /api-server/api-docs.json                                       controllers.ApiHelpController.getResources
GET            /api-server/api-docs.json/auth                                  controllers.ApiHelpController.getResource(path = "/auth")
# Map static resources from the /public folder to the /assets URL path
GET            /api-server/assets/*file                                        controllers.Assets.at(path="/public", file)
GET            /assets/*file                                                   controllers.Assets.at(path="/public", file)
GET            /                                                               controllers.HomeController.index

OPTIONS        /*all                                                           controllers.HomeController.preflight(all)


GET            /docs                                                           controllers.HomeController.swagger()
GET            /api-server/error                                               controllers.HomeController.error()
GET            /api-server/error/                                              controllers.HomeController.error()
GET            /error                                                          controllers.HomeController.error()
GET            /error/                                                         controllers.HomeController.error()
GET            /api-docs                                                       controllers.HomeController.api()

###### AppConfig Endpoints ######
POST           /app-config/                                                    controllers.system_configuration.AppConfigController.addAppConfig()
PATCH          /app-config/:appConfigId/                                       controllers.system_configuration.AppConfigController.updateAppConfig(appConfigId : String)
GET            /app-config/:appConfigId/                                       controllers.system_configuration.AppConfigController.getAppConfig(appConfigId : String)
GET            /app-config/                                                    controllers.system_configuration.AppConfigController.getAppConfigs()
DELETE         /app-config/:appConfigId/                                       controllers.system_configuration.AppConfigController.deleteAppConfig(appConfigId : String)

###### Notification Endpoints ######
GET            /notification/                                                  controllers.system_configuration.NotificationController.getSystemNotifications()
GET            /notification/:notificationId/                                  controllers.system_configuration.NotificationController.getNotification(notificationId: String)
GET            /notification/employee/received/:employeeId/                    controllers.system_configuration.NotificationController.getEmployeeNotifications(employeeId: String)
GET            /notification/employee/sent/:employeeId/                        controllers.system_configuration.NotificationController.getEmployeeSentNotifications(employeeId: String)
GET            /notification/employee/unread/:employeeId/                      controllers.system_configuration.NotificationController.getEmployeeUnReadNotifications(employeeId: String)
PATCH          /notification/read/:notificationId/                             controllers.system_configuration.NotificationController.markNotificationAsRead(notificationId: String)
PATCH          /notification/delete/:notificationId/                           controllers.system_configuration.NotificationController.markNotificationAsDeleted(notificationId: String)
DELETE         /notification/:notificationId/                                  controllers.system_configuration.NotificationController.deleteNotification(notificationId: String)
DELETE         /notification/employee/:employeeId/                             controllers.system_configuration.NotificationController.deleteAllEmployeeNotifications(employeeId: String)
PATCH          /notification/employee/delete/:employeeId/                      controllers.system_configuration.NotificationController.markAllEmployeeNotificationsAsDeleted(employeeId: String)
PATCH          /notification/employee/read/:employeeId/                        controllers.system_configuration.NotificationController.markAllEmployeeNotificationsAsRead(employeeId: String)
POST           /notification/                                                  controllers.system_configuration.NotificationController.createNotification()

###### Notification Template Endpoints ######
GET            /notification-template/                                         controllers.system_configuration.NotificationTemplateController.getAllNotificationTemplates()
GET            /notification-template/:notificationTemplateId/                 controllers.system_configuration.NotificationTemplateController.getNotificationTemplate(notificationTemplateId: String)
GET            /notification-template/notification/:notificationTemplateId/    controllers.system_configuration.NotificationTemplateController.getTemplateNotifications(notificationTemplateId: String)
POST           /notification-template/                                         controllers.system_configuration.NotificationTemplateController.createNotificationTemplate()
PATCH          /notification-template/                                         controllers.system_configuration.NotificationTemplateController.editNotificationTemplate()

###### Permission Endpoints ######
GET            /permission/                                                    controllers.system_configuration.PermissionController.getAllPermissions()
POST           /permission/                                                    controllers.system_configuration.PermissionController.addPermission()
GET            /permission/:permissionId/                                      controllers.system_configuration.PermissionController.getPermission(permissionId: String)
PATCH          /permission/:permissionId/                                      controllers.system_configuration.PermissionController.updatePermission(permissionId: String)
DELETE         /permission/:permissionId/                                      controllers.system_configuration.PermissionController.deletePermission(permissionId: String)

###### Role Endpoints ######
GET            /role/                                                          controllers.system_configuration.RoleController.getAllRole()
POST           /role/                                                          controllers.system_configuration.RoleController.addRole()
GET            /role/:roleId/                                                  controllers.system_configuration.RoleController.getRole(roleId: String)
PATCH          /role/:roleId/                                                  controllers.system_configuration.RoleController.updateRole(roleId: String)
DELETE         /role/:roleId/                                                  controllers.system_configuration.RoleController.deleteRole(roleId: String)

###### Role-Permission ######
GET            /role-permission/grant/:roleId/:permissionId/                   controllers.system_configuration.RolePermissionController.grantPermissionToRole(roleId: String, permissionId: String)
GET            /role-permission/revoke/:roleId/:permissionId/                  controllers.system_configuration.RolePermissionController.revokePermissionFromRole(roleId: String, permissionId: String)
GET            /role-permission/permissions/:roleId/                           controllers.system_configuration.RolePermissionController.getPermissionsForRole(roleId: String)
GET            /role-permission/roles/:permissionId/                           controllers.system_configuration.RolePermissionController.getRolesForPermission(permissionId: String)
GET            /role-permission/                                               controllers.system_configuration.RolePermissionController.getAllRolePermission()

###### Leave Management ######
GET            /leave/                                                         controllers.leave_management.LeaveManagementController.getAllLeaveRequests()
GET            /leave/pending/                                                 controllers.leave_management.LeaveManagementController.getAllPendingRequests()
GET            /leave/completed/                                               controllers.leave_management.LeaveManagementController.getAllCompletedLeave()
GET            /leave/ongoing/                                                 controllers.leave_management.LeaveManagementController.getAllOngoingLeave()
GET            /leave/:leaveRequestId/                                         controllers.leave_management.LeaveManagementController.getLeaveRequest(leaveRequestId: String)
POST           /leave/                                                         controllers.leave_management.LeaveManagementController.createLeaveRequest()
GET            /leave/employee/:employeeId/                                    controllers.leave_management.LeaveManagementController.getEmployeeLeaveRequests(employeeId: String)
GET            /leave/approver/:employeeId/                                    controllers.leave_management.LeaveManagementController.getEmployeeApprovedLeaveRequests(employeeId: String)
GET            /leave/history/:employeeId/                                     controllers.leave_management.LeaveManagementController.getEmployeeLeaveHistory(employeeId: String)
PATCH          /leave/                                                         controllers.leave_management.LeaveManagementController.approveLeaveRequest()
PATCH          /leave/cancel/:employeeId/                                      controllers.leave_management.LeaveManagementController.cancelLeaveRequest(employeeId: String)
PATCH          /leave/reject/                                                  controllers.leave_management.LeaveManagementController.rejectLeaveRequest()
PATCH          /leave/accept/                                                  controllers.leave_management.LeaveManagementController.acceptLeaveRequest()
PATCH          /leave/complete/:employeeId/                                    controllers.leave_management.LeaveManagementController.markLeaveRequestAsComplete(employeeId: String)
DELETE         /leave/:leaveRequestId/                                         controllers.leave_management.LeaveManagementController.deleteLeaveRequest(leaveRequestId: String)

###### Event Management ######
GET            /event/                                                         controllers.event_management.EventController.getAllEvents()
POST           /event/                                                         controllers.event_management.EventController.addEvent()
GET            /event/:eventId/                                                controllers.event_management.EventController.getEvent(eventId: String)
PATCH          /event/:eventId/                                                controllers.event_management.EventController.updateEvent(eventId: String)
DELETE         /event/:eventId/                                                controllers.event_management.EventController.deleteEvent(eventId: String)

###### Department Endpoints ######
GET            /department/                                                    controllers.employee_management.DepartmentController.getAllDepartments()
POST           /department/                                                    controllers.employee_management.DepartmentController.addDepartment()
GET            /department/:departmentId/                                      controllers.employee_management.DepartmentController.getDepartmentById(departmentId: String)
PATCH          /department/:departmentId/                                      controllers.employee_management.DepartmentController.updateDepartment(departmentId: String)
DELETE         /department/:departmentId/                                      controllers.employee_management.DepartmentController.deleteDepartment(departmentId: String)

###### Department-Head Endpoints ######
GET            /department-head/                                               controllers.employee_management.DepartmentHeadController.getAllDepartmentHeads()
GET            /department-head/:departmentHeadId/                             controllers.employee_management.DepartmentHeadController.getDepartmentHeadById(departmentHeadId: String)
GET            /department-head/department/:employeeId/                        controllers.employee_management.DepartmentHeadController.getDepartmentsHeadByEmployee(employeeId: String)
GET            /department-head/employee/:departmentId/                        controllers.employee_management.DepartmentHeadController.getDepartmentHeadByDepartmentId(departmentId: String)
GET            /department-head/set/:employeeId/:departmentId/                 controllers.employee_management.DepartmentHeadController.setEmployeeAsDepartmentHead(employeeId: String, departmentId: String)
GET            /department-head/remove/:employeeId/:departmentId/              controllers.employee_management.DepartmentHeadController.removeEmployeeAsDepartmentHead(employeeId: String, departmentId: String)

###### Emergency Contact Endpoints ######
GET            /emergency-contact/                                             controllers.employee_management.EmergencyContactController.getAllEmergencyContacts()
POST           /emergency-contact/add/:employeeId                              controllers.employee_management.EmergencyContactController.addEmergencyContact(employeeId: String)
GET            /emergency-contact/:emergencyContactId/                         controllers.employee_management.EmergencyContactController.getEmergencyContact(emergencyContactId: String)
PATCH          /emergency-contact/:emergencyContactId/                         controllers.employee_management.EmergencyContactController.updateEmergencyContact(emergencyContactId: String)
DELETE         /emergency-contact/:emergencyContactId/                         controllers.employee_management.EmergencyContactController.deleteEmergencyContact(emergencyContactId: String)
GET            /emergency-contact/employee/:employeeId/                        controllers.employee_management.EmergencyContactController.getEmergencyContactsOfEmployee(employeeId: String)

###### Employee Endpoints ######
GET            /employee/                                                      controllers.employee_management.EmployeeController.getAllEmployee()
POST           /employee/                                                      controllers.employee_management.EmployeeController.addEmployee()
POST           /employee/pp/                                                   controllers.employee_management.EmployeeController.addEmployeeWithProfilePicture()
GET            /employee/:employeeId/                                          controllers.employee_management.EmployeeController.getEmployeeById(employeeId: String)
DELETE         /employee/:employeeId/                                          controllers.employee_management.EmployeeController.deleteEmployee(employeeId: String)
GET            /employee/set-active/:employeeId/                               controllers.employee_management.EmployeeController.markEmployeeActive(employeeId: String)
GET            /employee/set-inactive/:employeeId/                             controllers.employee_management.EmployeeController.markEmployeeInactive(employeeId: String)
POST           /employee/set-status/:employeeId/                               controllers.employee_management.EmployeeController.setEmployeeStatus(employeeId: String)
GET            /employee/set-role/:employeeId/:roleId/                         controllers.employee_management.EmployeeController.setEmployeeRole(employeeId: String, roleId: String)
POST           /employee/profile-picture/:employeeId/                          controllers.employee_management.EmployeeController.setEmployeeProfilePicture(employeeId: String)
GET            /employee/profile-picture/:employeeId/                          controllers.employee_management.EmployeeController.getEmployeeProfilePicture(employeeId: String)

###### Employee Update Request ######
POST           /employee-update/:employeeId/                                   controllers.employee_management.EmployeeUpdateRequestController.submitUpdateRequest(employeeId: String)
GET            /employee-update/cancel/:employeeUpdateRequestId/:employeeId/   controllers.employee_management.EmployeeUpdateRequestController.cancelUpdateRequest(employeeUpdateRequestId: String, employeeId: String)
GET            /employee-update/all/                                           controllers.employee_management.EmployeeUpdateRequestController.getAllEmployeeUpdateRequest()
GET            /employee-update/pending/                                       controllers.employee_management.EmployeeUpdateRequestController.getAllPendingUpdateRequest()
GET            /employee-update/approved/                                      controllers.employee_management.EmployeeUpdateRequestController.getAllApprovedUpdateRequest()
GET            /employee-update/completed/                                     controllers.employee_management.EmployeeUpdateRequestController.getAllCompletedUpdateRequest()
GET            /employee-update/all/:employeeId/                               controllers.employee_management.EmployeeUpdateRequestController.getUpdateRequestsOfEmployee(employeeId: String)
GET            /employee-update/pending/:employeeId/                           controllers.employee_management.EmployeeUpdateRequestController.getPendingUpdateRequestsOfEmployee(employeeId: String)
GET            /employee-update/approved/:approverEmployeeId/                  controllers.employee_management.EmployeeUpdateRequestController.getAllApprovedUpdateRequestByEmployee(approverEmployeeId: String)
GET            /employee-update/completed/:employeeId/                         controllers.employee_management.EmployeeUpdateRequestController.getCompletedUpdateRequestsOfEmployee(employeeId: String)
POST           /employee-update/review/:employeeUpdateRequestId/:approverEmployeeId         controllers.employee_management.EmployeeUpdateRequestController.reviewUpdateRequest(employeeUpdateRequestId: String, approverEmployeeId: String)
DELETE         /employee-update/:employeeUpdateRequestId/                      controllers.employee_management.EmployeeUpdateRequestController.deleteUpdateRequest(employeeUpdateRequestId: String)
GET            /employee-update/:employeeUpdateRequestId/                      controllers.employee_management.EmployeeUpdateRequestController.getUpdateRequest(employeeUpdateRequestId: String)

##### Employee Document #####
POST           /employee/document/:employeeId                                  controllers.employee_management.EmployeeDocumentUploadController.uploadDocument(employeeId: String)
GET            /employee/document/:employeeId                                  controllers.employee_management.EmployeeDocumentUploadController.retrieveAllEmployeeDocuments(employeeId: String)
GET            /employee/get-document/:employeeDocumentId                      controllers.employee_management.EmployeeDocumentUploadController.getDocumentFile(employeeDocumentId: String)
DELETE         /employee/document/:employeeDocumentId                          controllers.employee_management.EmployeeDocumentUploadController.deleteADocument(employeeDocumentId: String)

##### Document Management #####
POST           /document/                                                      controllers.document_management.DocumentController.uploadADocument()
GET            /document/:documentId/                                          controllers.document_management.DocumentController.retrieveDocument(documentId: String)
DELETE         /document/:documentId/                                          controllers.document_management.DocumentController.deleteADocument(documentId: String)

###### Options Management ######
GET            /option/                                                        controllers.system_configuration.OptionsAndTypesController.getOptions()
POST           /option/                                                        controllers.system_configuration.OptionsAndTypesController.addOption()
GET            /option/:optionId                                               controllers.system_configuration.OptionsAndTypesController.getOption(optionId: String)
PATCH          /option/:optionId/value/:value                                  controllers.system_configuration.OptionsAndTypesController.editOption(optionId: String, value: String)
GET            /option/:optionTypeId/type                                      controllers.system_configuration.OptionsAndTypesController.getOptionsForType(optionTypeId: String)

###### Option Type ######
GET            /option-type/                                                   controllers.system_configuration.OptionsAndTypesController.getOptionTypes()
GET            /option-type/:optionTypeId                                      controllers.system_configuration.OptionsAndTypesController.getOptionType(optionTypeId: String)
PATCH          /option-type/:optionTypeId                                      controllers.system_configuration.OptionsAndTypesController.editOptionType(optionTypeId: String)

###### Authentication ######
POST           /auth/signin/                                                   controllers.authentication.AuthenticationController.signEmployeeIn()

###### Attendance Tracking ######
GET            /attendance/check-in/:employeeId/                               controllers.attendance_management.AttendanceController.clockIn(employeeId: String)
GET            /attendance/check-out/:employeeId/                              controllers.attendance_management.AttendanceController.clockOut(employeeId: String)
GET            /attendance/:attendanceId/                                      controllers.attendance_management.AttendanceController.getAttendance(attendanceId: String)

POST           /attendance/employee/                                           controllers.attendance_management.AttendanceController.getEmployeeAttendanceRecords()
GET            /attendance/employee/:employeeId/                               controllers.attendance_management.AttendanceController.getAllAttendanceRecordForEmployee(employeeId: String)
POST           /attendance/employee/report/                                    controllers.attendance_management.AttendanceController.getEmployeeAttendanceReport()

POST           /attendance/department/                                         controllers.attendance_management.AttendanceController.getDepartmentAttendance()
GET            /attendance/department/:departmentId                            controllers.attendance_management.AttendanceController.getAllDepartmentAttendance(departmentId: String)
POST           /attendance/department/report/                                  controllers.attendance_management.AttendanceController.getDepartmentAttendanceReport()

POST           /attendance/system/                                             controllers.attendance_management.AttendanceController.getSystemAttendance()
GET            /attendance/system/                                             controllers.attendance_management.AttendanceController.getAllSystemAttendance()
POST           /attendance/system/report/                                      controllers.attendance_management.AttendanceController.getSystemAttendanceReport()

POST           /attendance/working-hours/employee                              controllers.attendance_management.AttendanceController.getEmployeeWorkingHours()
POST           /attendance/working-hours/department                            controllers.attendance_management.AttendanceController.getDepartmentWorkingHours()
POST           /attendance/working-hours/system                                controllers.attendance_management.AttendanceController.getSystemWorkingHours()

DELETE         /attendance/:attendanceId/                                      controllers.attendance_management.AttendanceController.deleteAttendanceRecord(attendanceId: String)
DELETE         /attendance/employee/:attendanceId/                             controllers.attendance_management.AttendanceController.deleteEmployeeAttendanceRecord(attendanceId: String)

GET            /attendance/open/:employeeId/                                   controllers.attendance_management.AttendanceController.employeeHasOpenAttendance(employeeId: String)

###### Performance Evaluation ######
POST           /performance/attendance-summary/                                controllers.performance_evaluation.PerformanceEvaluationController.getAttendanceSummaryOfEmployee()
GET            /performance/overview/                                          controllers.performance_evaluation.PerformanceEvaluationController.getCurrentDayPerformanceOverview()
POST           /performance/overview/                                          controllers.performance_evaluation.PerformanceEvaluationController.getPerformanceOverviewBetweenTimePeriod()
POST           /performance/evaluation/employee/:employeeId/                   controllers.performance_evaluation.PerformanceEvaluationController.getEmployeePerformanceBetweenDatePeriod(employeeId: String)
GET            /performance/evaluation/last/                                   controllers.performance_evaluation.PerformanceEvaluationController.getLastEmployeeEvaluation()
GET            /performance/evaluation/all/                                    controllers.performance_evaluation.PerformanceEvaluationController.getAllEmployeeEvaluations()
GET            /performance/evaluation/all/:employeeId/                        controllers.performance_evaluation.PerformanceEvaluationController.getAllEmployeeEvaluationsOf(employeeId: String)
GET            /performance/evaluation/:performanceEvaluationId/               controllers.performance_evaluation.PerformanceEvaluationController.getEmployeeEvaluationById(performanceEvaluationId: String)
POST           /performance/evaluation/feedback/:performanceEvaluationId/      controllers.performance_evaluation.PerformanceEvaluationController.postFeedbackOnEvaluation(performanceEvaluationId: String)
DELETE         /performance/evaluation/:performanceEvaluationId/               controllers.performance_evaluation.PerformanceEvaluationController.deleteEmployeeEvaluation(performanceEvaluationId: String)

##### Announcement Management #####
GET            /announcement/all/                                              controllers.announcement_management.AnnouncementController.getAllEmployeeAnnouncements()
GET            /announcement/unread/                                           controllers.announcement_management.AnnouncementController.getAllUnreadEmployeeAnnouncements()
GET            /announcement/received/:announcementRecipientId/                controllers.announcement_management.AnnouncementController.markEmployeeAnnouncementAsRead(announcementRecipientId: String)
GET            /announcement/received/                                         controllers.announcement_management.AnnouncementController.markAllEmployeeAnnouncementsAsRead()
POST           /announcement/                                                  controllers.announcement_management.AnnouncementController.createAnnouncement()
GET            /announcement/                                                  controllers.announcement_management.AnnouncementController.getAllAnnouncementRecords()
GET            /announcement/:announcementId/                                  controllers.announcement_management.AnnouncementController.getAnnouncementRecordById(announcementId: String)
PATCH          /announcement/:announcementId/                                  controllers.announcement_management.AnnouncementController.updateAnnouncementRecord(announcementId: String)
DELETE         /announcement/:announcementId/                                  controllers.announcement_management.AnnouncementController.deleteAnnouncementRecord(announcementId: String)

